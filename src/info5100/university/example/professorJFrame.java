/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package info5100.university.example;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseCatalog.CourseCatalog;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseCatalog.CourseCatalog;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.PersonDirectory;
import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author shreyascr
 */
public class professorJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    static ArrayList<String> al2 = new ArrayList();
     static StudentDirectory sd;

    public professorJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButton1)
                .addContainerGap(158, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jButton1)
                .addContainerGap(209, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        System.out.println("Mouse Clicked");
        getProfessorList("");
        for(String s : al2)
        {
            System.out.println(s);
        }
        getStudentTakenByProf(al2.get(0), sd);
        //setGrade("info 5100", sd, "A","");
        //getGrade("info 5100", sd, "A","");
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    
    public static void prepareData()
    {
        Department department = new Department("Information Systems");
        PersonDirectory pd = department.getPersonDirectory();
         FacultyDirectory fd = department.getFacultyDirectory();
        Person person1 = pd.newPerson("123456");
        FacultyProfile fp = fd.newStudentProfile(person1);
        
        
        Course course = department.newCourse("app eng", "info 5100", 4);
        Course course1 = department.newCourse("dmdd", "info 6100", 5);
         
        CourseCatalog cc = new CourseCatalog(department);
        ArrayList<Course> ac = new ArrayList();
        ac.add(course);
        ac.add(course1);
        cc.setCourselist(ac);
        
        
        CourseSchedule courseschedule = department.newCourseSchedule("Fall2020");

        CourseOffer courseoffer = courseschedule.newCourseOffer("info 5100");
        
        courseoffer.AssignAsTeacher(fp);
        courseoffer.generatSeats(10);
   
        
        
        FacultyProfile facultyProfile = new FacultyProfile(person1);
//        facultyProfile.AssignAsTeacher(courseoffer);
//        facultyProfile.getCourseOffer("info 5100");
       //  CourseOffer courseoffer1 = courseschedule.newCourseOffer("info 6100");
        
      //  courseoffer1.generatSeats(20);
        
       
        Person person = pd.newPerson("0112303");
         sd = department.getStudentDirectory();
        StudentProfile student = sd.newStudentProfile(person);
        ArrayList<StudentProfile> studentlist = new ArrayList<>();
        studentlist.add(student);
        sd.setStudentlist(studentlist);
        CourseLoad courseload = student.newCourseLoad("Fall2020"); 
//        
        courseload.newSeatAssignment(courseoffer);
      
        
      //  courseload.newSeatAssignment(courseoffer1);//register student in class
       
//      Iterable<SeatAssignment> ass = courseload.getSeatassignments();
//        for(SeatAssignment val:ass){
//             System.out.println("Total: " + val.getGrade());
//        }
      //  System.out.println("Total: " +fp.getCourseOffer("info 5100"));
        System.out.println("Total: " + cc.getCourseByNumber("info 5100"));
       // CourseSchedule courseschedule1 = new CourseSchedule();
        
        
        
       
        

        
    }
    
    
    public static void getStudentTakenByProf(String courseID, StudentDirectory sd){
        
        ArrayList<StudentProfile> as = new ArrayList();
        List<StudentProfile> list = sd.getStudentlist();
        for(StudentProfile sp : list)
        {
            List<SeatAssignment> list1 = sp.getCourseLoadBySemester("Fall2020").getSeatassignments();
            for(SeatAssignment seatAssignment : list1)
            {
                if(seatAssignment.getSeat().getCourseoffer().getCourse().getCOurseNumber().equals(courseID))
                {
                    System.out.println(sp.getPerson().getPersonId());
                }
            }
        }
     
        
    }
    
    public static void setGrade(String courseID, StudentDirectory sd , String grade , String studentId){
        
        ArrayList<StudentProfile> as = new ArrayList();
        List<StudentProfile> list = sd.getStudentlist();
        for(StudentProfile sp : list)
        {
            List<SeatAssignment> list1 = sp.getCourseLoadBySemester("Fall2020").getSeatassignments();
            for(SeatAssignment seatAssignment : list1)
            {
                if(seatAssignment.getSeat().getCourseoffer().getCourse().getCOurseNumber().equals(courseID) && sp.getPerson().getPersonId().equals(studentId))
                {
                  //  System.out.println(sp.getPerson().getPersonId());
                    seatAssignment.setGrade(grade);
                }
            }
        }
     
        
    }
    
    public static void getGrade(String courseID, StudentDirectory sd , String grade , String studentId){
        
        ArrayList<StudentProfile> as = new ArrayList();
        List<StudentProfile> list = sd.getStudentlist();
        for(StudentProfile sp : list)
        {
            List<SeatAssignment> list1 = sp.getCourseLoadBySemester("Fall2020").getSeatassignments();
            for(SeatAssignment seatAssignment : list1)
            {
                if(seatAssignment.getSeat().getCourseoffer().getCourse().getCOurseNumber().equals(courseID) && sp.getPerson().getPersonId().equals(studentId))
                {
                  //  System.out.println(sp.getPerson().getPersonId());
                    System.out.println(seatAssignment.getGrade());
                }
            }
        }
     
        
    }
    
    public void getProfessorList(String semester)
    {
        Department department = sd.getDepartment();
        CourseSchedule courseSchedule = department.getCourseSchedule("Fall2020");
       ArrayList<CourseOffer> al1 = courseSchedule.getSchedule();
        System.out.println(al1.size());
                 for(int i=0 ; i < al1.size(); i++){
            //System.out.println(al1.get(i).getFacultyProfile());
            if(al1.get(i).getFacultyProfile().getPerson().getPersonId().equals("123456")){
                al2.add(al1.get(i).getCourse().getCOurseNumber());
            }
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new professorJFrame().setVisible(true);
                prepareData();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
